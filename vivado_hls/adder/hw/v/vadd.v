// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vadd,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=125,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1691,HLS_SYN_LUT=2011,HLS_VERSION=2019_1}" *)

module vadd (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_pp0_stage0 = 29'd512;
parameter    ap_ST_fsm_state13 = 29'd1024;
parameter    ap_ST_fsm_state14 = 29'd2048;
parameter    ap_ST_fsm_state15 = 29'd4096;
parameter    ap_ST_fsm_state16 = 29'd8192;
parameter    ap_ST_fsm_state17 = 29'd16384;
parameter    ap_ST_fsm_state18 = 29'd32768;
parameter    ap_ST_fsm_state19 = 29'd65536;
parameter    ap_ST_fsm_state20 = 29'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 29'd262144;
parameter    ap_ST_fsm_state24 = 29'd524288;
parameter    ap_ST_fsm_pp2_stage0 = 29'd1048576;
parameter    ap_ST_fsm_state27 = 29'd2097152;
parameter    ap_ST_fsm_state28 = 29'd4194304;
parameter    ap_ST_fsm_pp3_stage0 = 29'd8388608;
parameter    ap_ST_fsm_state32 = 29'd16777216;
parameter    ap_ST_fsm_state33 = 29'd33554432;
parameter    ap_ST_fsm_state34 = 29'd67108864;
parameter    ap_ST_fsm_state35 = 29'd134217728;
parameter    ap_ST_fsm_state36 = 29'd268435456;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] in1;
wire   [31:0] in2;
wire   [31:0] out_r;
wire   [31:0] size;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln93_reg_636;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln100_reg_656;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state28;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln118_reg_700;
reg   [0:0] icmp_ln118_reg_700_pp3_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state36;
reg   [0:0] icmp_ln121_reg_719;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] j_0_reg_243;
reg   [30:0] j_0_reg_243_pp0_iter1_reg;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [30:0] j1_0_reg_255;
reg   [30:0] j1_0_reg_255_pp1_iter1_reg;
wire    ap_block_state21_pp1_stage0_iter0;
reg    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [30:0] j2_0_reg_267;
reg   [30:0] j3_0_reg_278;
reg   [31:0] size_read_reg_578;
wire   [32:0] p_cast12_fu_299_p1;
reg   [32:0] p_cast12_reg_584;
wire   [32:0] p_cast11_fu_313_p1;
reg   [32:0] p_cast11_reg_589;
wire   [32:0] p_cast10_fu_327_p1;
reg   [32:0] p_cast10_reg_594;
wire   [31:0] tmp_11_fu_401_p3;
reg   [31:0] tmp_11_reg_599;
wire   [31:0] i_fu_414_p2;
reg   [31:0] i_reg_607;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln79_fu_409_p2;
wire   [31:0] select_ln83_fu_430_p3;
reg   [31:0] select_ln83_reg_612;
wire  signed [32:0] sext_ln96_fu_438_p1;
reg  signed [32:0] sext_ln96_reg_624;
reg   [31:0] gmem_addr_reg_630;
wire   [0:0] icmp_ln93_fu_461_p2;
reg   [0:0] icmp_ln93_reg_636_pp0_iter1_reg;
wire   [30:0] j_fu_466_p2;
reg   [30:0] j_reg_640;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem_addr_read_reg_645;
reg   [31:0] gmem_addr_1_reg_650;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln100_fu_495_p2;
reg   [0:0] icmp_ln100_reg_656_pp1_iter1_reg;
wire   [30:0] j_1_fu_500_p2;
reg   [30:0] j_1_reg_660;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] gmem_addr_1_read_reg_665;
wire   [0:0] icmp_ln109_fu_515_p2;
reg   [0:0] icmp_ln109_reg_670;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state25_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [30:0] j_2_fu_520_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln113_fu_526_p1;
reg   [63:0] zext_ln113_reg_679;
reg   [31:0] gmem_addr_2_reg_694;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln118_fu_557_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state29_pp3_stage0_iter0;
wire    ap_block_state30_pp3_stage0_iter1;
wire    ap_block_state31_pp3_stage0_iter2;
reg    ap_block_state31_io;
reg    ap_block_pp3_stage0_11001;
wire   [30:0] j_3_fu_562_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] vout_buffer_q0;
reg   [31:0] vout_buffer_load_reg_714;
reg    ap_enable_reg_pp3_iter1;
wire   [0:0] icmp_ln121_fu_573_p2;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state24;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state25;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state29;
reg   [2:0] v1_buffer_address0;
reg    v1_buffer_ce0;
reg    v1_buffer_we0;
wire   [31:0] v1_buffer_q0;
reg   [2:0] v2_buffer_address0;
reg    v2_buffer_ce0;
reg    v2_buffer_we0;
wire   [31:0] v2_buffer_q0;
reg   [2:0] vout_buffer_address0;
reg    vout_buffer_ce0;
reg    vout_buffer_we0;
wire   [31:0] vout_buffer_d0;
reg  signed [31:0] i_0_reg_232;
reg    ap_block_state36;
reg   [30:0] ap_phi_mux_j_0_phi_fu_247_p4;
reg   [30:0] ap_phi_mux_j1_0_phi_fu_259_p4;
wire   [63:0] zext_ln96_fu_472_p1;
wire   [63:0] zext_ln103_fu_506_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln121_fu_568_p1;
wire  signed [63:0] sext_ln96_1_fu_447_p1;
wire  signed [63:0] sext_ln103_fu_481_p1;
wire  signed [63:0] sext_ln121_fu_543_p1;
wire    ap_block_pp3_stage0_01001;
wire   [29:0] tmp_5_fu_289_p4;
wire   [29:0] tmp_6_fu_303_p4;
wire   [29:0] tmp_7_fu_317_p4;
wire   [31:0] add_ln79_fu_339_p2;
wire   [31:0] sub_ln79_fu_353_p2;
wire   [28:0] p_lshr_fu_359_p4;
wire   [0:0] tmp_9_fu_345_p3;
wire   [28:0] sub_ln79_1_fu_369_p2;
wire   [28:0] tmp_10_fu_375_p4;
wire   [0:0] tmp_8_fu_331_p3;
wire   [28:0] select_ln79_fu_385_p3;
wire   [28:0] select_ln79_1_fu_393_p3;
wire   [0:0] icmp_ln83_fu_420_p2;
wire   [31:0] chunk_size_fu_425_p2;
wire   [32:0] add_ln96_fu_442_p2;
wire   [31:0] zext_ln93_fu_457_p1;
wire   [32:0] add_ln103_fu_477_p2;
wire   [31:0] zext_ln100_fu_491_p1;
wire   [31:0] zext_ln109_fu_511_p1;
wire   [32:0] add_ln121_fu_539_p2;
wire   [31:0] zext_ln118_fu_553_p1;
reg   [28:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

vadd_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
vadd_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .in1(in1),
    .in2(in2),
    .out_r(out_r),
    .size(size)
);

vadd_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
vadd_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(select_ln83_reg_612),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_2_reg_694),
    .I_AWID(1'd0),
    .I_AWLEN(select_ln83_reg_612),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(vout_buffer_load_reg_714),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

vadd_v1_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
v1_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v1_buffer_address0),
    .ce0(v1_buffer_ce0),
    .we0(v1_buffer_we0),
    .d0(gmem_addr_read_reg_645),
    .q0(v1_buffer_q0)
);

vadd_v1_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
v2_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v2_buffer_address0),
    .ce0(v2_buffer_ce0),
    .we0(v2_buffer_we0),
    .d0(gmem_addr_1_read_reg_665),
    .q0(v2_buffer_q0)
);

vadd_v1_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
vout_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(vout_buffer_address0),
    .ce0(vout_buffer_ce0),
    .we0(vout_buffer_we0),
    .d0(vout_buffer_d0),
    .q0(vout_buffer_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state25))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state25);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state29) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state29)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state29);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln121_reg_719 == 1'd0)) & (1'b1 == ap_CS_fsm_state36))) begin
        i_0_reg_232 <= i_reg_607;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_232 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j1_0_reg_255 <= 31'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln100_reg_656 == 1'd1))) begin
        j1_0_reg_255 <= j_1_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j2_0_reg_267 <= 31'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln109_fu_515_p2 == 1'd1))) begin
        j2_0_reg_267 <= j_2_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        j3_0_reg_278 <= 31'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln118_fu_557_p2 == 1'd1))) begin
        j3_0_reg_278 <= j_3_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_reg_636 == 1'd1))) begin
        j_0_reg_243 <= j_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_243 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln100_reg_656 == 1'd1))) begin
        gmem_addr_1_read_reg_665 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        gmem_addr_1_reg_650 <= sext_ln103_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        gmem_addr_2_reg_694 <= sext_ln121_fu_543_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_reg_636 == 1'd1))) begin
        gmem_addr_read_reg_645 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_409_p2 == 1'd0))) begin
        gmem_addr_reg_630 <= sext_ln96_1_fu_447_p1;
        i_reg_607 <= i_fu_414_p2;
        select_ln83_reg_612 <= select_ln83_fu_430_p3;
        sext_ln96_reg_624 <= sext_ln96_fu_438_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln100_reg_656 <= icmp_ln100_fu_495_p2;
        icmp_ln100_reg_656_pp1_iter1_reg <= icmp_ln100_reg_656;
        j1_0_reg_255_pp1_iter1_reg <= j1_0_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln109_reg_670 <= icmp_ln109_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln118_reg_700 <= icmp_ln118_fu_557_p2;
        icmp_ln118_reg_700_pp3_iter1_reg <= icmp_ln118_reg_700;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        icmp_ln121_reg_719 <= icmp_ln121_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln93_reg_636 <= icmp_ln93_fu_461_p2;
        icmp_ln93_reg_636_pp0_iter1_reg <= icmp_ln93_reg_636;
        j_0_reg_243_pp0_iter1_reg <= j_0_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_1_reg_660 <= j_1_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_640 <= j_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cast10_reg_594[29 : 0] <= p_cast10_fu_327_p1[29 : 0];
        p_cast11_reg_589[29 : 0] <= p_cast11_fu_313_p1[29 : 0];
        p_cast12_reg_584[29 : 0] <= p_cast12_fu_299_p1[29 : 0];
        size_read_reg_578 <= size;
        tmp_11_reg_599[31 : 3] <= tmp_11_fu_401_p3[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln118_reg_700 == 1'd1))) begin
        vout_buffer_load_reg_714 <= vout_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln109_fu_515_p2 == 1'd1))) begin
        zext_ln113_reg_679[30 : 0] <= zext_ln113_fu_526_p1[30 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_461_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln100_fu_495_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln109_fu_515_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln118_fu_557_p2 == 1'd0)) begin
        ap_condition_pp3_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_409_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln100_reg_656 == 1'd1))) begin
        ap_phi_mux_j1_0_phi_fu_259_p4 = j_1_reg_660;
    end else begin
        ap_phi_mux_j1_0_phi_fu_259_p4 = j1_0_reg_255;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_reg_636 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_247_p4 = j_reg_640;
    end else begin
        ap_phi_mux_j_0_phi_fu_247_p4 = j_0_reg_243;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_409_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            gmem_ARADDR = gmem_addr_1_reg_650;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            gmem_ARADDR = gmem_addr_reg_630;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln121_reg_719 == 1'd0)) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln121_reg_719 == 1'd0))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln100_reg_656 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_reg_636 == 1'd1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln118_reg_700_pp3_iter1_reg == 1'd1))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (icmp_ln121_reg_719 == 1'd0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln100_reg_656 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln93_reg_636 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (icmp_ln118_reg_700_pp3_iter1_reg == 1'd1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v1_buffer_address0 = zext_ln113_fu_526_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        v1_buffer_address0 = zext_ln96_fu_472_p1;
    end else begin
        v1_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        v1_buffer_ce0 = 1'b1;
    end else begin
        v1_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln93_reg_636_pp0_iter1_reg == 1'd1))) begin
        v1_buffer_we0 = 1'b1;
    end else begin
        v1_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v2_buffer_address0 = zext_ln113_fu_526_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        v2_buffer_address0 = zext_ln103_fu_506_p1;
    end else begin
        v2_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        v2_buffer_ce0 = 1'b1;
    end else begin
        v2_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln100_reg_656_pp1_iter1_reg == 1'd1))) begin
        v2_buffer_we0 = 1'b1;
    end else begin
        v2_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        vout_buffer_address0 = zext_ln121_fu_568_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        vout_buffer_address0 = zext_ln113_reg_679;
    end else begin
        vout_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        vout_buffer_ce0 = 1'b1;
    end else begin
        vout_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln109_reg_670 == 1'd1))) begin
        vout_buffer_we0 = 1'b1;
    end else begin
        vout_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln79_fu_409_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_fu_461_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_fu_461_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln100_fu_495_p2 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln100_fu_495_p2 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln109_fu_515_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln109_fu_515_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln118_fu_557_p2 == 1'd0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln118_fu_557_p2 == 1'd0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln121_fu_573_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln121_reg_719 == 1'd0)) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_477_p2 = ($signed(p_cast11_reg_589) + $signed(sext_ln96_reg_624));

assign add_ln121_fu_539_p2 = ($signed(p_cast12_reg_584) + $signed(sext_ln96_reg_624));

assign add_ln79_fu_339_p2 = (size + 32'd7);

assign add_ln96_fu_442_p2 = ($signed(sext_ln96_fu_438_p1) + $signed(p_cast10_reg_594));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln93_reg_636 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln93_reg_636 == 1'd1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln100_reg_656 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln100_reg_656 == 1'd1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state31_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln93_reg_636 == 1'd1));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln100_reg_656 == 1'd1));
end

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_io = ((gmem_WREADY == 1'b0) & (icmp_ln118_reg_700_pp3_iter1_reg == 1'd1));
end

assign ap_block_state31_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36 = ((gmem_BVALID == 1'b0) & (icmp_ln121_reg_719 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign chunk_size_fu_425_p2 = ($signed(size_read_reg_578) - $signed(i_0_reg_232));

assign i_fu_414_p2 = ($signed(i_0_reg_232) + $signed(32'd8));

assign icmp_ln100_fu_495_p2 = (($signed(zext_ln100_fu_491_p1) < $signed(select_ln83_reg_612)) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_515_p2 = (($signed(zext_ln109_fu_511_p1) < $signed(select_ln83_reg_612)) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_557_p2 = (($signed(zext_ln118_fu_553_p1) < $signed(select_ln83_reg_612)) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_573_p2 = ((select_ln83_reg_612 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_409_p2 = ((i_0_reg_232 == tmp_11_reg_599) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_420_p2 = (($signed(i_fu_414_p2) > $signed(size_read_reg_578)) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_461_p2 = (($signed(zext_ln93_fu_457_p1) < $signed(select_ln83_reg_612)) ? 1'b1 : 1'b0);

assign j_1_fu_500_p2 = (ap_phi_mux_j1_0_phi_fu_259_p4 + 31'd1);

assign j_2_fu_520_p2 = (j2_0_reg_267 + 31'd1);

assign j_3_fu_562_p2 = (j3_0_reg_278 + 31'd1);

assign j_fu_466_p2 = (ap_phi_mux_j_0_phi_fu_247_p4 + 31'd1);

assign p_cast10_fu_327_p1 = tmp_7_fu_317_p4;

assign p_cast11_fu_313_p1 = tmp_6_fu_303_p4;

assign p_cast12_fu_299_p1 = tmp_5_fu_289_p4;

assign p_lshr_fu_359_p4 = {{sub_ln79_fu_353_p2[31:3]}};

assign select_ln79_1_fu_393_p3 = ((tmp_8_fu_331_p3[0:0] === 1'b1) ? 29'd0 : select_ln79_fu_385_p3);

assign select_ln79_fu_385_p3 = ((tmp_9_fu_345_p3[0:0] === 1'b1) ? sub_ln79_1_fu_369_p2 : tmp_10_fu_375_p4);

assign select_ln83_fu_430_p3 = ((icmp_ln83_fu_420_p2[0:0] === 1'b1) ? chunk_size_fu_425_p2 : 32'd8);

assign sext_ln103_fu_481_p1 = $signed(add_ln103_fu_477_p2);

assign sext_ln121_fu_543_p1 = $signed(add_ln121_fu_539_p2);

assign sext_ln96_1_fu_447_p1 = $signed(add_ln96_fu_442_p2);

assign sext_ln96_fu_438_p1 = i_0_reg_232;

assign sub_ln79_1_fu_369_p2 = (29'd0 - p_lshr_fu_359_p4);

assign sub_ln79_fu_353_p2 = ($signed(32'd4294967289) - $signed(size));

assign tmp_10_fu_375_p4 = {{add_ln79_fu_339_p2[31:3]}};

assign tmp_11_fu_401_p3 = {{select_ln79_1_fu_393_p3}, {3'd0}};

assign tmp_5_fu_289_p4 = {{out_r[31:2]}};

assign tmp_6_fu_303_p4 = {{in2[31:2]}};

assign tmp_7_fu_317_p4 = {{in1[31:2]}};

assign tmp_8_fu_331_p3 = size[32'd31];

assign tmp_9_fu_345_p3 = add_ln79_fu_339_p2[32'd31];

assign vout_buffer_d0 = (v1_buffer_q0 + v2_buffer_q0);

assign zext_ln100_fu_491_p1 = ap_phi_mux_j1_0_phi_fu_259_p4;

assign zext_ln103_fu_506_p1 = j1_0_reg_255_pp1_iter1_reg;

assign zext_ln109_fu_511_p1 = j2_0_reg_267;

assign zext_ln113_fu_526_p1 = j2_0_reg_267;

assign zext_ln118_fu_553_p1 = j3_0_reg_278;

assign zext_ln121_fu_568_p1 = j3_0_reg_278;

assign zext_ln93_fu_457_p1 = ap_phi_mux_j_0_phi_fu_247_p4;

assign zext_ln96_fu_472_p1 = j_0_reg_243_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    p_cast12_reg_584[32:30] <= 3'b000;
    p_cast11_reg_589[32:30] <= 3'b000;
    p_cast10_reg_594[32:30] <= 3'b000;
    tmp_11_reg_599[2:0] <= 3'b000;
    zext_ln113_reg_679[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //vadd
